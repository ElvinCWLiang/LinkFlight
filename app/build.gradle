plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id "org.jlleitschuh.gradle.ktlint" version "12.2.0"
    alias(libs.plugins.kotlin.compose)
}

android {
    compileSdk 35

    defaultConfig {
        applicationId "com.elvinliang.aviation"
        minSdk 26
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        manifestPlaceholders = [MAPS_API_KEY: "${properties.getProperty('google.map.key')}"]

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    buildFeatures {
        viewBinding true
        dataBinding true
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.4.0"
    }
    namespace 'com.elvinliang.aviation'

    android.testOptions {
        unitTests.all {
            it.useJUnitPlatform()

            // Always run tests, even when nothing changed.
            dependsOn 'cleanTest'

            // Show test results.
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }
}

ktlint {
    android.set(true)
    outputColorName.set("RED")
}

dependencies {
    // Hilt
    implementation libs.hilt.android
    implementation libs.hilt.navigation.compose
//    implementation libs.androidx.compose.material.material
    kapt libs.hilt.compiler

    // Play Services
    implementation libs.play.services.location
    implementation libs.play.services.maps

    // Koin (BOM + individual libraries)
    implementation platform(libs.koin.bom)
    implementation libs.koin.core
    implementation libs.koin.android
    implementation libs.koin.compat
    implementation libs.koin.navigation
    implementation libs.koin.startup
    implementation libs.koin.compose
    implementation libs.koin.composeviewmodel
    implementation libs.koin.composeviewmodel.navigation
    implementation libs.koin.androidx.compose
    implementation libs.koin.androidx.composenavigation

    // Firebase (BOM + individual libraries)
    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics.ktx
    implementation libs.firebase.auth.ktx
    implementation libs.firebase.messaging
    implementation libs.firebase.messaging.ktx

    // AndroidX Core & Layout
    implementation libs.core.ktx
    implementation libs.appcompat
    implementation libs.constraintlayout

    // Material & UI
    implementation libs.material                  // Material Design 2
    implementation libs.androidx.material         // Material Design 2 (alternate)
    implementation libs.material3                 // Material Design 3
    implementation libs.androidx.foundation       // Foundation components
    implementation libs.androidx.ui               // Core UI toolkit
    implementation libs.androidx.ui.tooling.preview
    debugImplementation libs.androidx.ui.tooling
//    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.test.manifest
    implementation libs.androidx.material.icons.core
    implementation libs.androidx.material.icons.extended
    implementation libs.androidx.material3.window.size.class1
//    implementation     libs.androidx.lifecycle.runtime.compose
    implementation libs.androidx.activity.compose
//    implementation     libs.androidx.lifecycle.viewmodel.compose
    implementation libs.androidx.runtime.livedata

    // Compose BOM
    def composeBom = libs.androidx.compose.bom
    implementation(platform(composeBom))
    androidTestImplementation composeBom

    // Maps Compose
    implementation libs.maps.compose

    // Accompanist
    implementation libs.accompanist.navigation.material
    implementation libs.accompanist.permissions

    // WorkManager (Kotlin + Coroutines)
    implementation libs.work.runtime.ktx
    implementation libs.work.gcm
    implementation libs.work.multiprocess
    androidTestImplementation libs.work.testing

    // Networking
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.okhttp
    implementation libs.gson
    implementation libs.moshi
    // kapt          libs.moshi.kotlin.codegen

    // Image Loading
    implementation libs.glide

    // Logging
    implementation libs.timber

    // Debug / Flipper
    debugImplementation libs.flipper
    debugImplementation libs.flipper.network.plugin
    debugImplementation libs.soloader
    releaseImplementation libs.flipper.noop

    // Testing
    testImplementation libs.junit.jupiter.api
    testRuntimeOnly libs.junit.jupiter.engine
//    testImplementation     libs.kotest.runner.junit5.jvm
    testImplementation libs.kotest.assertions.core
    testImplementation libs.kotest.property
    testImplementation libs.mockito.core
    androidTestImplementation libs.espresso.core
}
